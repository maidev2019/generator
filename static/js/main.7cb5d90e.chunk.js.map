{"version":3,"sources":["mapp4.js","strId.js","App.js","reportWebVitals.js","index.js"],"names":["chance","require","iso_abbreviations","Andorra","Albania","Austria","Azerbaijan","Bahrain","Belgium","Bosnia","Brazil","Bulgaria","Costa_rica","Croatia","Cyprus","Czechia","Denmark","Dominicana","Estonia","Faroe_Islands","Finland","France","Georgia","Germany","Gibraltar","Greece","Greenland","Guatemala","Hungary","Iceland","Ireland","Israel","Italy","Jordan","Kazakhstan","Kuwait","Latvia","Lebanon","Liechtenstein","Lithuania","Luxembourg","Macedonia","Malta","Mauritania","Mauritius","Moldova","Monaco","Montenegro","Netherlands","Norway","Pakistan","Poland","Palestine","Portugal","Qatar","Kosovo","Romania","Saint_Lucia","San_Marino","Sao_Tome_Principe","Saudi","Serbia","Seychelles","Slovakia","Slovenia","Spain","Sweden","Switzerland","Timor_Leste","Tunisia","Turkey","Ukraine","UAE","UK","Virgin_Islands","Test1","Test2","Algeria","Angola","Benin","Burkina_Faso","Burundi","Cameroon","Cape_Verde","Iran","Ivory_Coast","Madagascar","Mali","Mozambique","Senegal","Comoros","Chad","Congo","Egypt","Gabon","Honduras","Morocco","Nicuragua","Niger","Togo","country_length","letter_map","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","character_countries","BARCLAYS_sort","Albania_sort","Austria_sort","Belgium_sort_code","Greek_sort","Croatia_sort","Hungray_sort","UAE_sort","Bulgaria_sort","Spanish_sort","Monaco_sort","Monaco_sort1","NL_Accounts","Romania_sort","Portugal_sort","num_gen3","span","string","length","pool","char_gen","randomChar","n","array","characterArray","split","result","i","Math","floor","random","String","prototype","bankAccountKey","deb","rst","str","this","toString","substr","replaceChars","conv_string","conv_char","IBAN_conv","replace","conv_array","calcChecksum","countryCode","randomPart","checkString","checksum","checkCheck","ribCheck","input","inp","iny","rib_cand2","j","replaceChars2","mod11","cifras","cheqeo","Number","norwayCheck","fact","tot","account_num","rem","buildIbans","country_input","ISO","IBAN_length","middle_characters","_","sample","UK_numeric_suffix","BR_randomPart","SY_randomPart","MA_BIC","MA_randomPart","ALB_numeric_suffix","BM_numeric_part","how","ES_numeric_part","account_number","eArray","eLen","st","ceil","estoniaCheckDigit","interIBAN","numeric_part","Italy_map","0","1","2","3","4","5","6","7","8","9","yy","xx","charAt","jj","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","bnb2","first_digit","second_digit","spanishCheck","NR_numeric_part","chek","MN_numeric_part","y","z","x","FR_numeric_part","RM_numeric_part","PT_numeric_part","a1","ch","charCodeAt","check","mod97_10","numeric_suffix","getRandomElement","arr","shuffle","remove","pop","getFirstTenDigits","digits","push","e","trippleElement","shift","calcCheckDigit","prod","sum","createSteuerIdDigits","s","threeInRow","getIndexoffThreeDigitsInRow","checkThreeDigistAreInRow","replaceAll","faceCount","forEach","element","item","index","indexOfThrees","ReactModal","setAppElement","gm","countriesForUmsatzID","value","label","countriesForIBAN","csvHeaders","key","csvData","buildUSTID","country","find","obj","App","props","state","iban","taxIDNumber","bundesland","taxNumber","generate","ustIDCountry","ustID","showModal","environment","programm","request","process","requestTaxNum","requestTaxID","requestIban","decision","bundeslandHandlerTaxNum","bind","handleSubmitTaxNum","handleSubmitTaxID","countryHandler","handleSubmitIBAN","generateAllValues","handleSubmitUstID","handleOnChangeUstID","handleCSVData","handleOpenModal","handleCloseModal","handleSaveData","bl","target","stnr","setState","preventDefault","num","console","log","program","taxnumber","taxid","requestnumber","processnumber","className","type","disabled","name","onChange","map","option","onClick","id","class","data","headers","filename","isOpen","contentLabel","onRequestClose","overlayClassName","Form","Group","size","Label","Control","defaultValue","onInput","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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c,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAAc,aAA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","file":"static/js/main.7cb5d90e.chunk.js","sourcesContent":["// If you can get ahold of this, it is free to use.\nimport _ from 'lodash';\n//import chance, {string} from 'chance';\n\nvar Chance = require('chance');\n\n// Instantiate Chance so it can be used\nvar chance = new Chance();\n\n//JSONs\nvar iso_abbreviations = {Andorra:\"AD\", Albania:\"AL\", Austria:\"AT\", Azerbaijan:\"AZ\", Bahrain:\"BH\", Belgium:\"BE\", Bosnia:\"BA\", Brazil:\"BR\", Bulgaria:\"BG\", Costa_rica:\"CR\", Croatia:\"HR\", Cyprus:\"CY\", Czechia:\"CZ\", Denmark:\"DK\", Dominicana:\"DO\", Estonia:\"EE\", Faroe_Islands:\"FO\", Finland:\"FI\", France:\"FR\", Georgia:\"GE\", Germany:\"DE\", Gibraltar:\"GI\", Greece:\"GR\", Greenland:\"GL\", Guatemala:\"GT\", Hungary:\"HU\", Iceland:\"IS\", Ireland:\"IE\", Israel:\"IL\", Italy:\"IT\", Jordan:\"JO\", Kazakhstan:\"KZ\", Kuwait:\"KW\", Latvia:\"LV\", Lebanon:\"LB\", Liechtenstein:\"LI\", Lithuania:\"LT\", Luxembourg:\"LU\", Macedonia:\"MK\", Malta:\"MT\", Mauritania:\"MR\", Mauritius:\"MU\", Moldova:\"MD\", Monaco:\"MC\", Montenegro:\"ME\", Netherlands:\"NL\", Norway:\"NO\", Pakistan:\"PK\", Poland:\"PL\", Palestine:\"PS\", Portugal:\"PT\", Qatar:\"QA\", Kosovo:\"XK\", Romania:\"RO\", Saint_Lucia:\"LC\", San_Marino:\"SM\", Sao_Tome_Principe:\"ST\", Saudi:\"SA\", Serbia:\"RS\", Seychelles:\"SC\", Slovakia:\"SK\", Slovenia:\"SI\", Spain:\"ES\", Sweden:\"SE\", Switzerland:\"CH\", Timor_Leste:\"TL\", Tunisia:\"TN\", Turkey:\"TR\", Ukraine:\"UA\", UAE:\"AE\", UK:\"GB\", Virgin_Islands:\"VG\", Test1:\"YY\", Test2:\"ZZ\", Algeria:\"DZ\", Angola:\"AO\", Benin:\"BJ\", Burkina_Faso:\"BF\", Burundi:\"BI\", Cameroon:\"CM\", Cape_Verde:\"CV\", Iran:\"IR\", Ivory_Coast:\"CI\", Madagascar:\"MG\", Mali:\"ML\", Mozambique:\"MZ\", Senegal:\"SN\", Comoros:\"KM\", Chad:\"TD\", Congo:\"CG\", Egypt:\"EG\", Gabon:\"GA\", Honduras:\"HN\", Morocco:\"MA\", Nicuragua:\"NI\", Niger:\"NE\", Togo:\"TG\"};\nvar country_length = {Andorra:24, Albania:28, Austria:20, Azerbaijan:28, Bahrain:22, Belgium:16, Bosnia:20, Brazil:29, Bulgaria:22, Costa_rica:21, Croatia:21, Cyprus:28, Czechia:24, Denmark:18, Dominicana:28, Estonia:20, Faroe_Islands:18, Finland:18, France:27, Georgia:22, Germany:22, Gibraltar:23, Greece:27, Greenland:18, Guatemala:28, Hungary:28, Iceland:26, Ireland:22, Israel:23, Italy:27, Jordan:30, Kazakhstan:20, Kuwait:30, Latvia:21, Lebanon:28, Liechtenstein:21, Lithuania:20, Luxembourg:20, Macedonia:19, Malta:31, Mauritania:27, Mauritius:30, Moldova:24, Monaco:27, Montenegro:22, Netherlands:18, Norway:15, Pakistan:24, Poland:28, Palestine:29, Portugal:25, Qatar:29, Kosovo:20, Romania:24, Saint_Lucia:32, San_Marino:27, Sao_Tome_Principe:25, Saudi:24, Serbia:22, Seychelles:31, Slovakia:24, Slovenia:19, Spain:24, Sweden:24, Switzerland:21, Timor_Leste:23, Tunisia:24, Turkey:26, Ukraine:29, UAE:23, UK:22, Virgin_Islands:24, Test1:34, Test2:35, Algeria:24, Angola:25, Benin:26, Burkina_Faso:27, Burundi:16, Cameroon:27, Cape_Verde:25, Iran:26, Ivory_Coast:28, Madagascar:27, Mozambique:25, Mali:28, Senegal:28, Comoros:27, Chad:27, Congo:27, Egypt:27, Gabon:27, Honduras:28, Morocco:28, Nicuragua:32, Niger:28, Togo:28};\nvar letter_map = {A:10, B:11, C:12, D:13, E:14, F:15, G:16, H:17, I:18, J:19, K:20, L:21, M:22, N:23, O:24, P:25, Q:26, R:27, S:28, T:29, U:30, V:31, W:32, X:33, Y:34, Z:35};\nvar character_countries = {Albania:0, Andorra:0, Austria:0, Azerbaijan:4, Bahrain:4, Belgium:0, Bosnia:0, Brazil:0, Bulgaria:4, Costa_rica:0, Croatia:0, Cyprus:0, Czechia:0, Denmark:0, Dominicana:4, Estonia:0, Faroe_Islands:0, Finland:0, France:0, Georgia:0, Germany:0, Gibraltar:4, Greece:0, Greenland:0, Guatemala:0, Hungary:0, Iceland:0, Ireland:4, Israel:0, Italy:1, Jordan:4, Kazakhstan:0, Kuwait:4, Latvia:4, Lebanon:0, Liechtenstein:0, Lithuania:0, Luxembourg:0, Macedonia:0, Malta:4, Mauritania:0, Mauritius:4, Moldova:0, Monaco:0, Montenegro:0, Netherlands:4, Norway:0, Pakistan:4, Poland:0, Palestine:4, Portugal:0, Qatar:4, Kosovo:0, Romania:4, Saint_Lucia:4, San_Marino:1, Sao_Tome_Principe:0, Saudi:0, Serbia:0, Seychelles:4, Slovenia:0, Slovakia:0, Spain:0, Sweden:0, Switzerland:0, Timor_Leste:0, Tunisia:0, Turkey:0, Ukraine:0, UAE:0, UK:4, Virgin_Islands:4, Test1:4, Test2:4, Algeria:0, Angola:0, Benin:1, Burkina_Faso:0, Burundi:0, Cameroon:0, Cape_Verde:0, Iran:0, Ivory_Coast:1, Madagascar:0, Mali:1, Mozambique:0, Senegal:1, Comoros:0, Chad:0, Congo:0, Egypt:0, Gabon:0, Honduras:4, Morocco:0, Nicuragua:4, Niger:0, Togo:0}\n//var generated_without_length = {Albania:4, Andorra:4, Austria:3, }\n\n// Arrays\n//var UK_Banks = [\"BARC\", \"CSFB\", \"LOYD\"]\n//var UK_accounts = [\"36405294\", \"\"]\nvar BARCLAYS_sort = [\"200318\", \"200326\", \"200353\", \"200378\", \"200380\", \"200384\", \"200395\", \"200401\", \"200404\"]\n//var Credit_Suisse_sort = []\n//var Lloyds_sort = [\"876934\", \"874304\", \"874302\", \"874301\", \"779551\", \"779535\", \"779516\", \"779515\", \"779519\", \"779518\", \"779514\", \"779513\", \"779520\", \"779521\", \"779512\", \"779511\", \"779510\", \"779509\", \"779508\", \"779507\", \"779506\", \"779505\", \"779504\", \"779503\", \"779502\", \"779331\", \"779314\", \"779311\", \"779309\", \"779307\", \"779305\", \"779304\", \"779302\", \"779301\", \"779300\", \"779181\", \"779180\", \"779171\", \"779169\", \"779168\", \"779166\", \"779165\", \"779164\", \"779163\", \"779161\", \"779149\", \"779148\", \"779147\", \"779146\", \"779145\", \"779144\", \"779143\", \"779142\", \"779141\", \"779140\", \"779127\", \"779139\", \"779138\", \"779136\", \"779134\", \"779133\", \"779132\", \"779131\", \"779130\", \"779129\", \"779128\", \"779126\", \"779124\"]\n//var given_part = {Czechia:\"5051\", Bosnia:\"102\"}\nvar Albania_sort = [\"61456613\", \"13411321\", \"21451126\", \"87938313\"]\nvar Austria_sort = [\"14000\", \"19360\", \"19470\", \"11000\", \"54000\", \"12000\", \"20604\", \"32000\", \"60000\", \"54000\", \"20404\", \"36218\", \"32195\", \"66163\", \"34000\", \"20111\", \"22500\"]\n//var Austria_account = [\"00237571500\", \"2101023600\"]\nvar Belgium_sort_code = [\"199\", \"173\", \"798\", \"587\", \"988\", \"817\", \"978\", \"548\", \"897\", \"557\", \"631\", \"519\", \"953\", \"663\", \"456\", \"233\", \"954\", \"812\", \"999\", \"561\", \"549\", \"957\", \"485\", \"321\", \"436\", \"429\", \"131\", \"735\", \"878\"]\nvar Greek_sort = [\"010\", \"011\", \"014\", \"017\"]\nvar Croatia_sort = [\"2340009\", \"2500009\", \"2402006\", \"2360000\", \"2484008\"]\nvar Hungray_sort = [\"10700024\", \"13100007\", \"10918001\"]\nvar UAE_sort = [\"021\", \"003\", \"033\", \"035\", \"026\"]\nvar Bulgaria_sort = [\"STSA9300\", \"UNCR7000\", \"RZBB9155\", \"TTBB9400\", \"BNPA9440\", \"IORT8094\"]\n//var Slovenia_sort = [\"24268\"]\nvar Spanish_sort = [\"2100\", \"2095\", \"0081\", \"2080\", \"0182\", \"0487\", \"0075\", \"3190\", \"2038\", \"1465\", \"3004\", \"0128\"]\n//var Swiss_sort = [\"89144\"]\nvar Monaco_sort = [\"12739\", \"10096\", \"14508\", \"17569\", \"30003\"]\nvar Monaco_sort1 = [\"00070\", \"00050\", \"00040\", \"00030\"]\n// NL\n//var NL_Banks = [\"ABNA\", \"RABO\", \"INGB\"];\nvar NL_Accounts = ['3767744449', '8849764685', '1679475908', '7568468658', '7356737620', '6465126079', '4353368141', '3115404417', '5198491756', '8877477636', '6787979517', '3014449407', '2749559820', '5985611140', '5138773127', '9471241308', '1878166956', '7108893045', '3729480081', '8201469062', '6333227641', '9238197806', '3659950165', '4458972219', '9549565319', '9317387888', '7910683588', '9747720019', '1927261899', '5299017782', '6201251618', '1628106735', '7853818114', '7527846909', '8674905641', '2122787074', '4886189474', '5136679077', '5361018961', '5632579034', '1199399817', '6496646791', '4388522244', '8135680120', '3070632572', '7942781380', '5350244469', '9538003810', '1992204624', '6732807986', '6708407906', '8141336991', '8729230152', '7440639480', '7637078981', '3146454459', '9688157082', '1143468236', '9481673421', '2137951150', '7774382046', '8234998285', '2952671982', '2863705849', '7507044742', '5373380466', '4461927814', '8727958558', '4737123439', '7998733292', '6583086565', '5994508810', '2779975601', '6212151431', '8806646958', '3840188059', '8589312569', '4613148448', '1158470533', '4642749241', '5811534469', '1869773616', '3304481311', '1196720460', '7608092459', '9079565997', '7819947683', '9402374159', '9955442484', '4781094090', '2288983183', '1670475085', '4948749915', '8999665062', '2295108179', '3526558027', '2978307978', '1822913977', '1773373838', '7236495824', '7794745128', '5883930565', '4717095111', '2420745027', '9918641924', '3730976796', '1284418839', '8441374295', '1344002129', '5920574038', '7984823820', '9223011655', '7577249270', '8548609842', '8794631506', '7030136047', '5582689532', '7650143244', '1188945513', '1383283540', '4242739303', '4448094871', '5804762982', '9193322984', '9971485915', '9915029543', '8966820263', '1289364745', '9091319364', '9859479577', '6908644960', '4861845297', '5124594993', '7906916670', '2900154197', '8683750361', '2262412073', '9326322815', '9450889198', '1401694179', '7925653426', '1022564560', '4982444048', '6863597098', '6496515182', '4133227913', '4789170233', '8998630931', '2760150151', '8009649546', '9942408754', '1920945032', '3659362247', '8765521307', '9966705163', '9351425231', '3518588532', '6579776978', '7773107033', '6995898621', '1655314556', '4362244417', '5660751954', '7569006453', '3215513765', '8675663943', '4987790602', '9691303264', '8386803843', '4731839270', '6143727961', '3675462129', '1246830221', '1584058048', '3031628489', '9695852815', '4520711568', '8044953574', '8831135759', '2197275291', '2579756728', '1369777396', '6649020443', '7393964341', '1440310556', '4545747078', '3717231707', '9248708374', '4760808973', '2766662669', '5982482471', '9434777216', '6121940131', '9737375777', '9795311433', '4707090842', '6055981262', '4879074012', '4734775338', '3945944457', '8902022560', '4259614754', '3420637519', '3731707721', '5940297536', '3025195118', '5595284773', '3064161482', '9631641651', '7939901389', '1857087526', '8635612388', '4880983179', '9657789273', '6669002742', '7134534839', '4197809344', '9932384941', '6291533782', '1938035321', '5963374561', '5690068063', '6022027691', '8193596846', '6775613067', '7183598144', '3154172025', '8265634552', '4099462951', '8731326943', '4427658911', '1979747032', '3550580576', '7977369877', '9961700368', '5985398153', '4666097791', '3690200148', '2683542178', '9904789940', '8139718173', '7389535490', '2775680828', '1103924680', '2221802675', '7852130259', '8978126928', '7200045691', '1302357468', '5074254043', '9258801903', '5588331737', '9574218201', '6684004963', '5028084874', '7467539436', '3039087649', '3141751439', '7723597010', '5558304928', '4416709382', '3564679081', '9942576223', '4759261354', '1578530261', '5963941776', '3175229417', '2764204256', '1484687876', '6506110988', '5253446745', '6044978370', '9082037890', '6277351028', '1383182396', '2859779760', '5427658955', '8230962103', '2718081430', '9732254661', '6289099205', '8805798800', '5560006823', '8450854113', '2268352412', '9053318992', '1390722899', '5477021047', '6435690758', '1782020381', '5157915454', '8694866803', '5766671156', '9985747011', '6152842603', '7209131833', '9287436010', '3330533676', '3261447176', '9130582334', '5162284696', '1041035373', '7873292649', '5316132912', '9763136946', '7023532722', '7948612920', '7672627392', '7711638558', '7673657082', '1319778291', '4643636556', '4378030446', '7434587830', '6864399966', '5179205913', '6482008283', '6401993928', '2720070572', '9691012820', '5361965189', '1438227787', '1574343181', '5239941823', '7181308424', '8681965719', '9809158653', '5965981937', '5082680188', '1978967489', '6709624056', '6563237436', '5030598332', '7705935139', '2858727643', '2596749386', '7103072574', '8181091612', '2555569839', '3905191822', '3039673343', '2274264198', '3382647974', '6359906732', '4937453297', '1944881964', '5794845619', '9535416235', '1115137468', '2412255601', '1466591145', '9701210220', '6143911908', '2315122457', '7537184356', '7523644651', '9965356246', '9406362538', '2922497305', '3496035218', '9373475770', '1957558601', '3104179859', '9043081477', '6653222179', '7909457464', '8910219718', '5408281337', '1011562413', '1415694826', '3121637177', '5195444706', '4892894109', '7619995846', '6839136159', '1899261257', '5068243019', '1008270121', '4418364501', '9996666778', '4780353297', '3605998615', '9501054837', '3627647424', '2283681073', '4492703411', '6686956546', '2753394563', '1969256915', '8355863143', '3777087823', '9548056305', '1606301918', '8380001095', '3696794244', '4115845937', '6282495962', '8720446314', '8013095843', '1782371249', '2605052419', '6224410976', '3779588560', '5206019070', '5716186998', '9627994502', '6631699223', '5994666033', '1139900560', '4040435087', '2677424363', '3195199319', '6864436837', '4309398243', '4683542374', '7229237580', '3717497545', '3135536696', '5679818272', '7007935591', '8487376045', '4665815860', '7959494258', '4746672490', '5172064443', '6221094275', '2327776783', '2908385309', '7806242643', '7659536168', '9521740876', '6434209169', '1906104131', '2045352188', '5242052503', '6291988119', '2364390338', '9925441714', '1971879746', '4863744099', '2370432586', '1320949010', '4734538751', '8261521222', '6879970117', '2469735076', '1588633721', '3182993631', '1621561526', '4621372092', '7451446883', '5406439960', '3451011026', '1380321867', '2293362523', '6911098343', '8672131290', '8247360527', '9313499797', '9565235778', '5311809574', '5999794323', '8817453765', '3351659555', '8338800724', '1091926204', '6038321969', '1403412472', '4758761590', '2318696306', '1521764247', '1663368082', '6111062476', '9455762838', '2371458805', '5262865534', '7651503031', '7649618366', '8933785434', '9392055374', '6285885613', '8253182457', '5614740864', '3221098502', '9323024236', '5486451466', '1105049337', '1388268736', '2503801668', '9403840137', '7830770891', '4907152752', '5888158534', '4824538831', '9897151745', '9634007716', '1068885432', '4696222926', '1321530935', '8995592788', '5394792070', '5406040774', '1579872026', '5558975318', '4312325952', '1157530303', '8845464385', '9392362188', '2847123288', '7843842861', '3670561447', '8592794269', '7909262728', '9038954298', '4999152932', '6922895703', '9003576416', '5749342085', '8972164151', '2238591354', '9222247655', '1599147955', '5697455291', '8871007662', '3643842074', '1021790842', '6664435071', '9596756389', '6143537119', '4097012428', '9372718300', '8035492543', '7489795591', '1876219181', '1584159804', '9073237009', '9007769359', '5750047296', '4745657714', '6637543128', '5319829221', '6737738109', '7621853905', '1911430777', '5183503354', '6266038226', '3984212798', '6665420221', '6519574414', '5111110259', '6548268733', '3667086008', '1729344860', '2650400811', '6371362585', '1749777983', '9442141368', '1272753638', '9338068110', '4489213824', '2366058993', '4240666252', '1047027607', '8205778493', '1436292697', '1163935948', '9384655988', '3991828197', '1417101881', '7363245428', '1782461868', '4395098177', '6233671132', '2486932380', '1311816593', '4915107582', '9999810888', '9730769656', '2682297498', '8855988913', '6487526967', '9732194030', '6319269278', '6755037397', '7527421754', '1522775986', '4824507324', '1122832273', '8694892022', '5330621534', '2011060885', '5245129183', '2792511621', '9893570476', '4980803245', '3741207772', '3309755649', '5732787127', '8502137913', '2067756052', '1568852959', '1587926199', '2187209016', '7619798757', '9592309493', '7748196702', '3367466468', '6733307944', '5831335380', '8219153121', '7082086296', '2228161411', '8284009536', '2405012723', '8706604226', '8708618194', '7349101430', '9012918502', '1028200056', '5753546897', '9996436217', '3506581023', '1363280856', '5792707111', '8439421117', '8480934492', '4228435912', '7004792366', '2892233402', '9374573679', '5597655787', '4923460458', '5132123597', '3882854936', '7177596941', '7070755813', '2262368678', '1142626903', '9227934553', '7828772912', '5861098352', '6771015777', '1200042867', '9589603858', '2376059879', '4634999471', '5547096946', '6064103256', '2532528516', '3783029058', '4281366911', '2141848644', '4658124920', '3755753065', '7368442647', '3184752488', '9099952775', '7792285766', '1558385967', '4217631642', '2524542076', '4358076548', '8977747317', '8229094322', '4212215411', '2057693643', '6201350640', '8645690365', '7140921482', '9661117578', '4141305669', '8361280820', '9861487085', '2095310012', '9639906824', '4783095582', '3912975930', '4186520410', '7509555507', '3100072456', '1901066592', '6502761380', '6662477214', '8473522664', '7138432496', '6223319916', '7482085033', '9049426654', '6511444724', '5653002348', '2379601127', '4047633976', '9054943327', '7052105551', '4398662022', '4521202713', '1104108267', '2560035731', '8852285024', '8946051078', '5641531316', '2266765221', '8738440008', '9822994664', '9260543673', '2467448487', '5393795351', '7829756201', '9694475635', '5257015404', '7851379504', '4193835510', '2663151874', '6495564279', '6512284550', '6070066847', '2122013192', '6187602722', '9679277003', '8835593166', '1154012735', '3909255345', '4991062764', '5004293872', '1965265332', '2128949858', '9434891019', '9071327418', '4435376989', '9096356438', '2136665782', '4083166800', '7704157876', '5175671529', '5356033141', '4461857859', '5749363309', '9224568173', '1958634190', '6270867398', '5528005485', '4966693802', '8973442368', '1430833394', '8803926372', '4407512164', '9558721522', '3137597226', '5027245882', '8758116443', '5924436675', '7639905176', '2423554788', '5993159871', '1412466180', '2575875390', '8424542584', '5525255073', '6798610471', '9695369502', '9397935380', '1375288695', '7743642356', '9127357228', '6986568002', '4887467303', '8611765885', '4705270495', '4031638493', '8424598490', '2603402463', '1692465635', '9678815451', '9415692391', '5251802137', '3942469782', '5252891109', '9618724476', '4110487447', '8571189358', '1424738261', '1397996838', '6797516501', '3130742751', '4315531456', '1540572579', '9131044735', '7114507283', '2202690484', '1049096673', '9846631219', '2863434403', '8434248247', '5435973945', '7044037380', '4909169245', '4526312517', '7798392807', '5273748739', '8479662646', '7189610219', '5405811602', '3998396233', '5079779284', '3749975701', '7134384551', '7498112493', '1495696898', '6316250355', '3838697359', '6470684289', '7232510543', '8933084452', '1171403585', '5051042988', '2298608059', '6383931601', '4826953240', '6034837898', '4428219474', '4597485589', '5301200062', '7951708135', '7668256466', '8533425791', '4972429011', '2786219639', '5612457383', '4054767621', '3665292913', '7020127142', '3470416656', '3528973196', '3838911296', '1070230618', '9647829353', '2504374283', '9788055427', '3595227557', '7256973586', '9167759785', '6500713311', '3466893453', '4787393871', '2490067532', '7905595609', '6971032004', '9739243436', '8971328290', '7080876885', '4405427607', '7691116985', '9500162865', '5602795901', '8743112544', '2454554658', '4386698256', '9712139840', '5647918042', '5476393838', '5082783165', '4370891833', '5406045164', '4993655010', '5890469479', '3045819168', '3591831883', '5319825374', '8027105943', '4562575255', '8252058302', '4871952010', '4475689805', '6296399693', '7035378898', '5808504708', '4963487330', '8014558928', '5240110409', '3643132999', '7085742275', '9824364420', '4952870715', '2338418883', '2899665057', '9502485475', '2856807216', '9763261902', '3206498058', '8835804299', '8818556967', '5055036109', '7054786548', '6684756000', '7123425928', '1208552090', '3831267707', '8418459174', '5252845719', '7584741207', '8233380377', '2121590226', '2938714947', '2859176594', '7652418755', '4649075238', '2825057568', '4636681924', '3349491480', '4415260276', '3365135561', '7071437513', '8057339330', '4026824314', '9837080566', '3851686748', '5070069357', '5353131762', '6784444442', '7024910534', '9980411821', '8011260901', '7116259503', '1954254121', '6008851617', '7600386364', '6799312636', '3034565194', '7341323558', '8584700412', '1458509540', '3966322153', '7520051579', '3221888112', '3187377025', '1968794778', '1914956885', '6360804956', '6918258974', '9202898340', '2773309480', '9242086444', '8985562061', '8858909097', '1735658812', '4293946624', '7243913512', '2424672245', '9906008334', '9464169427', '5598380021', '2098811624', '8214484995', '6373487717', '1964258413', '1768606978', '2755167904', '4220533664', '4452759149', '7762494464', '8430666915', '5515439724', '5994978469', '5040995164', '6099101268', '8617225181', '4985889105', '7732009851', '8432908576', '6770096250', '4304221396', '4438120233', '8681036211', '9082148838', '5946717057', '9510165298', '7889423187', '8085990849', '8494892657', '8816676248', '9304669103', '3403751775', '8238027543', '9154010896', '5228863516', '8316601095', '9108061688', '7827071589', '8399675482', '1756700125', '6854679206', '7864733042', '4883846911', '3971204384', '2640990624', '7808579459', '4605215840', '7976489410', '4956451237']\n//var France_sort = [\"30066\"]\nvar Romania_sort = [\"PORL\", \"RZBR\"]\nvar Portugal_sort = [\"00350651\"]\n\n\n\nfunction num_gen3(span) {\n\tvar num2 = chance.string({length: span, pool: '123456789'});\n\treturn num2;\n}\n\nfunction estoniaCheckDigit(account_number) {\n\n\tvar eArray = [7, 3, 1];\n\tvar eLen = account_number.length;\n\tvar st = account_number.length;\n\tvar tot = 0;\n\twhile(eLen > 0 && account_number.substr(--eLen, 1) >= 0) {\n\t\ttot += account_number.substr((st - 1) - eLen, 1) * eArray[(eLen % 3)];\n\t}\n\tvar cNum = ((Math.ceil((tot/10))*10) - tot);\n\treturn cNum;\n}\n\nfunction char_gen(span) {\n\tvar char2 = chance.string({length: span, pool: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'})\n\treturn char2;\n}\n\nString.prototype.bankAccountKey=function() {\n\tvar str = this.toString(),deb,rst;\n\twhile (deb=str.substr(0,12),str=str.substr(12)) {str=(deb%97).toString()+str;}\n\trst=98-deb%97;\n\treturn rst<10?'0'+rst:''+rst;\n}\n\nfunction randomElelment(array) {\n\treturn array[Math.floor(Math.random() * array.length)]\n}\n\nfunction randomChar(n) {\n\tvar characterArray = 'QWERTYUIOPLKJHGFDSAZXCVBNM'.split('')\n\tvar\tresult = '';\n\tfor (var i = 0; i < n; i++){\n\t\tresult += randomElelment(characterArray)\n\t}\n\treturn result;\n}\n\nfunction luhnCheck(input) {\n\tvar digi = 0;\n\tvar b = true;\n\tfor(var n = input.length - 1; n >= 0; n--) {\n\t\tvar dig = input.charAt(n);\n\t\tdigi = parseInt(dig, 10);\n\t\tif(b) {\n\t\t\tif((digi *= 2) > 9 ) digi -= 9;\n\t\t}\n\n\t\tdig += digi;\n\t\tb = !b;\n\t}\n\treturn (1000 - dig) % 10;\n}\n\nvar d=[\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], \n    [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], \n    [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], \n    [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], \n    [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], \n    [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], \n    [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], \n    [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], \n    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n];\n\n// permutation table p\nvar p=[\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], \n    [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], \n    [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], \n    [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], \n    [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], \n    [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], \n    [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], \n    [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]\n];\n\n// inverse table inv\nvar inv = [0, 4, 3, 2, 1, 5, 6, 7, 8, 9];\n\n// converts string or number to an array and inverts it\nfunction invArray(array){\n\n    if (Object.prototype.toString.call(array) === \"[object Number]\"){\n        array = String(array);\n    }\n\n    if (Object.prototype.toString.call(array) === \"[object String]\"){\n        array = array.split(\"\").map(Number);\n    }\n\treturn array.reverse();\n\n}\n\n// generates checksum\nfunction generateV(array){\n\n\tvar c = 0;\n\tvar invertedArray = invArray(array);\n\tfor (var i = 0; i < invertedArray.length; i++){\n\t\tc = d[c][p[((i + 1) % 8)][invertedArray[i]]];\n\t}\n\n\treturn inv[c];\n}\n\nfunction buildX(n, country) {\n\tvar l = {};\n\tvar i = 0;\n\tl[i] = [];\n\tif(n < 1)\n\t\treturn \"n must be greater than 1\";\n\tif(n > 100)\n\t\treturn \"n is too large, limit 100\"\n\tfor(i = 0; i < n; i++) {\n\t\tvar k = buildIbans(country)\n\t\tl[i] = k;\n\t}\n\treturn JSON.stringify(l);\n\t}\n\n// validates checksum\nfunction validateV(array) {\n\n    var c = 0;\n    var invertedArray = invArray(array);\n\n    for (var i = 0; i < invertedArray.length; i++){\n    \tc=d[c][p[(i % 8)][invertedArray[i]]];\n    }\n\n    return (c === 0);\n}\n\nfunction replaceChars(conv_string) {\n\tfor(var i = 0; i < conv_string.length; i++) {\n\t\tvar conv_char = conv_string[i];\n\t\tif(conv_char in letter_map) {\n\t\t\tvar IBAN_conv = letter_map[conv_char];\n\t\t\tconv_string = conv_string.replace(conv_char, IBAN_conv.toString());\n\t\t}\n\t}\n\treturn conv_string;\n}\n\nvar conv_array = {A:1, B:2, C:3, D:4, E:5, F:6, G:7, H:8, I:9, J:1, K:2, L:3, M:4, N:5, O:6, P:7, Q:8, R:9, S:2, T:3, U:4, V:5, W:6, X:7, Y:8, Z:9}\nfunction replaceChars2(input) {\n\tfor(var i = 0; i < input.length; i++) {\n\t\tvar conv_char = input[i];\n\t\tif(conv_char in conv_array) {\n\t\t\tvar j = conv_array[conv_char];\n\t\t\tinput = input.replace(conv_char, j.toString());\n\t\t}\n\t}\n\treturn input;\n}\n\nfunction calcChecksum(countryCode, randomPart) {\n\tvar checkString = randomPart + countryCode + \"00\";\n\tcheckString = replaceChars(checkString);\n\tvar checksum = checkString.bankAccountKey();\n\tvar checkCheck = randomPart + countryCode + checksum;\n\tcheckCheck = replaceChars(checkCheck);\n\treturn countryCode + checksum.toString() + randomPart;\n}\n\nfunction addChecksum(IBAN, checksum) {\n\tIBAN = IBAN.substring(0, IBAN.length - 2);\n\tIBAN += checksum;\n\treturn IBAN;\n}\n\nfunction ribCheck(input, inp, iny) {\n\tvar rib_cand2 = replaceChars2(iny);\n\tvar t = 97 - ((89 * input + 15 * inp + 3 * rib_cand2) % 97);\n\treturn t\n\n}\n\nvar table = [\n  [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],\n  [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],\n  [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],\n  [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],\n  [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],\n  [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],\n  [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],\n  [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],\n  [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],\n  [2, 5, 8, 1, 4, 3, 6, 7, 9, 0]\n];\n\nfunction calcDamm(basenumber) {\n  var s,damm;\n  damm = 0;\n  s = String(basenumber);\n  for (var i=0; i<s.length; ++i) {\n  \tdamm = table[damm][s.charAt(i)];\n  }\n  return damm;\n}\n\nfunction checkDamm(number) {\n  return calcDamm(number) === 0;\n}\n\nfunction rearrange(iban) {\n\tvar IBAN_prefix = iban.substring(iban.length - 4, iban.length);\n\tvar IBAN = iban.substring(0, iban - 4);\n\tIBAN_prefix += IBAN;\n\treturn IBAN;\n}\n\nfunction mod11_2(input) {\n\tvar modu = 11;\n\tvar rad = 2;\n\tvar output_val = '0123456789X';\n\tvar p = 0;\n\n\tfor(var i = 0; i < input.length; i++) {\n\t\tvar valu = output_val.indexOf(input.substr(i, 1));\n\t\tp = ((p + valu) * rad) % modu;\n\t}\n\tvar checksum = (modu - p + 1) % modu;\n\treturn output_val.substr(checksum, 1);\n\n}\n\n\n// Bosnia and others?\nfunction mod97_10(input) {\n\tvar a1 = 1;\n\tvar ch = input.charCodeAt(0) - 48;\n\tvar check = ch;\n\tfor(var i = (input.length - 2); i >= 0; i--) {\n\t\tch = input.charCodeAt(i) - 48;\n\t\ta1 = (a1 * 10) % 97;\n\t\tcheck += (a1 * (Number(ch)));\n\t}\n\tvar x = (98 - (check % 97));\n\tif(x < 10){\n\t\tx = \"0\" + x;\n\t}\n\treturn x;\n}\n\nfunction mod11(input) {\n\tvar cifras = [1,2,4,8,5,10,9,7,3,6];\n\tvar cheqeo = 0;\n\tfor(var i = 0; i < 10; i++) {\n\t\tcheqeo += Number(input[i]) * Number(cifras[i]);\n\t}\n\tcheqeo = 11 - (cheqeo % 11);\n\tif(cheqeo === 11) cheqeo = 0;\n\tif(cheqeo === 10) cheqeo = 1;\n\treturn cheqeo;\n}\n\nfunction norwayCheck(input) {\n\tvar fact = [5,4,3,2,7,6,5,4,3,2]\n\tvar tot = 0;\n\tvar account_num = input;\n\tfor(var i = 0; i < 10; i++) {\n\t\ttot += account_num[i] * fact[i];\n\t}\n\tvar rem = tot % 11;\n\tif(((11 - rem) % 11) === 10){\n\t}\n\treturn (11 - rem) % 11;\n}\n\nfunction spanishCheck() {\n\tvar bnb = _.sample(Spanish_sort) + num_gen3(4);\n\tvar bnb2 = \"00\" + bnb;\n\tvar account_num = num_gen3(10);\n\tvar first_digit = mod11(bnb2);\n\tvar second_digit = mod11(account_num);\n\tvar spainCheck = bnb2.substr(2,8) + first_digit + second_digit + account_num;\n\treturn spainCheck;\n}\n\nfunction portugalCheck(input) {\n\tvar sum = 0;\n\tvar port = [73, 17, 89, 38, 62, 45, 53, 15, 50, 5, 49, 34, 81, 76, 27, 90, 9, 30, 3]\n\tfor(var i = 0; i < 19; i++) {\n\t\tsum += input[i] * port[i];\n\t}\n\tvar x = 97 - (sum % 97);\n\tif(x < 10){\n\t\tx = \"0\" + x; \n\t}\n\treturn x;\n}\n\nexport function buildIbans(country_input) {\n  var ISO = iso_abbreviations[country_input];\n  var IBAN_length = country_length[country_input];\n  var middle_characters = character_countries[country_input];\n  switch(country_input) {\n\n  case \"Netherlands\":\n    \tvar NL_Banks = [\"ABNA\", \"RABO\", \"INGB\"];\n    \tvar NL_BIC = _.sample(NL_Banks)\n\t\tvar NL_numeric_part = _.sample(NL_Accounts)\n\t\tvar NL_cand = NL_BIC + NL_numeric_part + \"\";\n\t\tvar NL_IBAN = calcChecksum(ISO, NL_cand);\n\t\treturn NL_IBAN;\n\n  case \"UK\":\n \t\tvar UK_BIC = \"BARC\";// _.sample(UK_Banks); // lets brute force some first\n\t\tvar UK_numeric_suffix = IBAN_length - 4 - middle_characters;\n\t\tvar UK_numeric_part = \"\" + _.sample(BARCLAYS_sort) + num_gen3(UK_numeric_suffix - 6);\n\t\tvar UK_cand = UK_BIC + UK_numeric_part + \"\";\n\t\tvar UK_IBAN = calcChecksum(ISO, UK_cand);\n\t\treturn UK_IBAN;\n\n  case \"Brazil\":\n\t\tvar BR_numeric_suffix = IBAN_length - 6;\n\t\tvar BR_randomPart = num_gen3(BR_numeric_suffix);\n\t\tBR_randomPart += randomChar(1);\n\t\tBR_randomPart += num_gen3(1);\n\t\tvar BR_IBAN = calcChecksum(ISO, BR_randomPart);\n\t\treturn BR_IBAN;\n\n  case \"Seychelles\":\n\n\t\tvar SY_numeric_suffix = IBAN_length - 7;\n\t\tvar SY_randomPart = num_gen3(SY_numeric_suffix);\n\t\tSY_randomPart += randomChar(3);\n\t\tvar SY_IBAN = calcChecksum(ISO, SY_randomPart);\n\t\treturn SY_IBAN;\n\n  case \"Switzerland\":\n\t\tvar CH_numeric_suffix = IBAN_length - 9;\n\t\tvar CH_really = \"89144\" + num_gen3(CH_numeric_suffix);\n\t\tvar CH_IBAN = calcChecksum(ISO, CH_really);\n\t\treturn CH_IBAN;\n\n  case \"Mauritius\":\n\n\t\tvar MA_BIC = char_gen(middle_characters);\n\t\tvar MA_numeric_suffix = IBAN_length - 11;\n\t\tvar MA_randomPart = num_gen3(MA_numeric_suffix);\n\t\tMA_randomPart += randomChar(3);\n\t\tvar MA_cand = MA_BIC + MA_randomPart + \"\";\n\t\tvar MA_IBAN = calcChecksum(ISO, MA_cand);\n\t\treturn MA_IBAN;\n\n  case \"Albania\":\n\t\tvar ALB_numeric_suffix = IBAN_length - 12;\n\t\tvar ALB_numeric_part = \"\" + _.sample(Albania_sort) + num_gen3(ALB_numeric_suffix);\n\t\tvar ALB_IBAN = calcChecksum(ISO, ALB_numeric_part);\n\t\treturn ALB_IBAN;\n\n  case \"Belgium\":\n\n\t\tvar BM_numeric_part = \"\" + _.sample(Belgium_sort_code) + num_gen3(IBAN_length - 9);\n\t\tvar how = (Number(BM_numeric_part) % 97 + \"\");\n\t\tif(how < 10){\n\t\t\thow = \"0\" + how;\n\t\t}\n\t\tvar BM_randomPart = BM_numeric_part + how;\n\t\tvar BM_IBAN = calcChecksum(ISO, BM_randomPart);\n\t\treturn BM_IBAN;\n\n  case \"Bosnia\": \n\n\t\tvar BS_numeric_part = \"102\" + num_gen3(IBAN_length - 7);\n\t\tvar BS_randomPart = BS_numeric_part;\n\t\tvar BS_IBAN = calcChecksum(ISO, BS_randomPart);\n\t\treturn BS_IBAN;\n\n  case \"Estonia\":\n\n\t\tvar ES_numeric_part = num_gen3(IBAN_length - 7);\n\t\tvar ES_randomPart = \"12\" + ES_numeric_part + estoniaCheckDigit(ES_numeric_part);\n\t\tvar ES_IBAN = calcChecksum(ISO, ES_randomPart);                        // checksum == x % 31 ?     // x % 62?\n\t\treturn ES_IBAN;\n\n  case \"Czechia\":\n\n\t\tvar CZ_numeric_part = \"5051\" + num_gen3(IBAN_length - 8); // 0100\n\t\tvar CZ_randomPart = CZ_numeric_part;\n\t\tvar CZ_IBAN = calcChecksum(ISO, CZ_randomPart);\n\t\treturn CZ_IBAN;\n\n  case \"Greece\":\n\t\tvar GR_numeric_part = _.sample(Greek_sort) + num_gen3(IBAN_length - 7);\n\t\tvar interIBAN = calcChecksum(ISO, GR_numeric_part);\n\t\treturn interIBAN;\n\n  case \"Germany\":\n\t\tvar DE_randomPart = \"50010517\" + num_gen3(IBAN_length - 12);\n\t\tvar DE_IBAN = calcChecksum(ISO, DE_randomPart);\n\t\treturn DE_IBAN;\n\t\t// Method C1, Variant 2, Account 5559749181, Bank Code 50010517, Check digit 1 is at position 10, expected check digit: 1. Overview of the calculation: Take the digits in positions 1 to 9 - here: 555974918 -, Multiply them from the left to the right by the weights 1,2,1,2,1,2,1,2,1, add the transverse sums of the products, form the remainder of the division by 11, subtract the result from 10, Result modulo 11 is the expected reference number.\n  case \"Denmark\":\n\t\tvar DK_randomPart = \"5051\" + num_gen3(IBAN_length - 8);\n\t\tvar DK_IBAN = calcChecksum(ISO, DK_randomPart);\n\t\treturn DK_IBAN;\n\n  case \"Italy\":\n\t\tvar numeric_part = \"0300203280\" + num_gen3(IBAN_length - 15);\n\t\tvar Italy_map = {0:\"1\", 1:\"0\", 2:\"5\", 3:\"7\", 4:\"9\", 5:\"13\", 6:\"15\", 7:\"17\", 8:\"19\", 9:\"21\"}\n\t\tvar Italy_CIN = {0:\"A\", 1:\"B\", 2:\"C\", 3:\"D\", 4:\"E\", 5:\"F\", 6:\"G\", 7:\"H\", 8:\"I\", 9:\"J\", 10:\"K\", 11:\"L\", 12:\"M\", 13:\"N\", 14:\"O\", 15:\"P\", 16:\"Q\", 17:\"R\", 18:\"S\", 19:\"T\", 20:\"U\", 21:\"V\", 22:\"W\", 23:\"X\", 24:\"Y\", 25:\"Z\"}\n\t\tvar yy = 0;\n\t\tvar xx = 0;\n\t\tfor(var i = 1; i < 22; i += 2) {\n\t\t\tyy +=  Number(numeric_part.charAt(i));\n\n\t\t}\n\t\tfor(var j = 0; j < 22; j += 2) {\n\t\t\tvar jj = Number(numeric_part.charAt(j));\n\t\t\tvar ii = Italy_map[jj];\n\t\t\txx += Number(ii);\n\t\t}\n\t\tvar uu = xx + yy;\n\t\tvar ll = uu % 26;\n\t\tvar kk = Italy_CIN[ll];\n\t\tvar randomPart = kk + numeric_part;\n\t\tinterIBAN = calcChecksum(ISO, randomPart);\n\t\treturn interIBAN;\n\n  case \"Luxembourg\":\n\t\tvar LX_numeric_part = \"010\" + num_gen3(IBAN_length - 7);\n\t\tvar LX_IBAN = calcChecksum(ISO, LX_numeric_part);\n\t\treturn LX_IBAN;\n\n  case \"Liechtenstein\":\n\t\tvar LC_numeric_part = \"08800\" + num_gen3(IBAN_length - 9);\n\t\tvar LC_IBAN = calcChecksum(ISO, LC_numeric_part);\n\t\treturn LC_IBAN;\n\n  case \"Ireland\":\n\t\tvar IR_numeric_part =  num_gen3(IBAN_length - 16);\n\t\tvar IR_randomPart = \"BOFI900017\" + IR_numeric_part;\n\t\tvar IR_IBAN = calcChecksum(ISO, IR_randomPart);\n\t\treturn IR_IBAN;\n\n  case \"Poland\":\n\t\tvar PL_numeric_part = \"10902402\" + num_gen3(IBAN_length - 12);\n\t\tvar PL_IBAN = calcChecksum(ISO, PL_numeric_part);\n\t\treturn PL_IBAN;\n\n  case \"Austria\":\n\t\tvar AU_numeric_part = _.sample(Austria_sort) + num_gen3(IBAN_length - 9);\n\t\tvar AU_IBAN = calcChecksum(ISO, AU_numeric_part);\n\t\treturn AU_IBAN;\n\t\t// 54000\n  case \"Croatia\":\n\t\tvar CRT_numeric_part = _.sample(Croatia_sort) + num_gen3(IBAN_length - 11);\n\t\tvar CRT_IBAN = calcChecksum(ISO, CRT_numeric_part);\n\t\treturn CRT_IBAN;\n\n  case \"Kosovo\":\n\t\tvar KV_numeric_part = \"11\" + num_gen3(IBAN_length - 6);\n\t\tvar KV_IBAN = calcChecksum(ISO, KV_numeric_part);\n\t\treturn KV_IBAN;\n\n  case \"San_Marino\":\n\t\tvar SM_numeric_part = \"0322509800\" + num_gen3(IBAN_length - 14);\n\t\tinterIBAN = calcChecksum(ISO, SM_numeric_part);\n\t\treturn interIBAN;\n\t\t// 0322509800\n  case \"Hungary\": \n\t\tvar HG_numeric_part = _.sample(Hungray_sort) + num_gen3(IBAN_length - 12);\n\t\tvar HG_IBAN = calcChecksum(ISO, HG_numeric_part);\n\t\treturn HG_IBAN; \n\n  case \"UAE\":\n\t\tvar UA_numeric_part = _.sample(UAE_sort) + num_gen3(IBAN_length - 7);\n\t\tvar UA_IBAN = calcChecksum(ISO, UA_numeric_part);\n\t\treturn UA_IBAN; \n\n  case \"Bulgaria\":\n\t\tvar BG_numeric_part = _.sample(Bulgaria_sort) + num_gen3(IBAN_length - 12);\n\t\tvar BG_IBAN = calcChecksum(ISO, BG_numeric_part);\n\t\treturn BG_IBAN; \n\n  case \"Spain\":\n\t\tvar SP_randomPart = spanishCheck();\n\t\tvar SP_IBAN = calcChecksum(ISO, SP_randomPart);\n\t\treturn SP_IBAN; \n\n  case \"Turkey\":\n\t\tvar TR_numeric_part = \"00062\" + num_gen3(IBAN_length - 9);\n\t\tvar TR_IBAN = calcChecksum(ISO, TR_numeric_part);\n\t\treturn TR_IBAN;\n\n  case \"Norway\":\n\t\tvar NR_numeric_part = num_gen3(IBAN_length - 5);\n\t\tvar chek = norwayCheck(numeric_part);\n\t\twhile(chek === 10) {\n\t\t\tNR_numeric_part = num_gen3(IBAN_length - 5);\n\t\t\tchek = norwayCheck(numeric_part);\n\t\t}\n\t\tvar NR_randomPart = NR_numeric_part + chek;\n\t\tvar NR_IBAN = calcChecksum(ISO, NR_randomPart);\n\t\treturn NR_IBAN;\n\n  case \"Monaco\":\n\t\tvar MN_numeric_part = Number(_.sample(Monaco_sort)); \n\t\tvar y =  _.sample(Monaco_sort1)\n\t\tvar z = num_gen3(10) + randomChar(1);\n\t\tvar x = ribCheck(MN_numeric_part, y, z);\n\t\tif(x < 10) {\n\t\t\tx = \"0\" + x;\n\t\t}\n\t\tvar MN_randomPart = MN_numeric_part + y + z + x;\n\t\tvar MN_IBAN = calcChecksum(ISO, MN_randomPart);\n\t\treturn MN_IBAN;\n\n  case \"France\":\n\t\tvar FR_numeric_part = Number(_.sample(Monaco_sort)); \n\t\ty =  _.sample(Monaco_sort1)\n\t\tz = num_gen3(10) + randomChar(1);\n\t\tx = ribCheck(FR_numeric_part, y, z);\n\t\tif(x < 10) {\n\t\t\tx = \"0\" + x;\n\t\t}\n\t\tvar FR_randomPart = FR_numeric_part + y + z + x;\n\t\tvar FR_IBAN = calcChecksum(ISO, FR_randomPart);\n\t\treturn FR_IBAN;\n\n  case \"Romania\":\n\t\tvar RM_numeric_part = num_gen3(IBAN_length - 8);\n\t\tvar RM_randomPart = _.sample(Romania_sort) + RM_numeric_part; \n\t\tvar RM_IBAN = calcChecksum(ISO, RM_randomPart);\n\t\treturn RM_IBAN;\n\n  case \"Costa_rica\":\n\t\tvar CR_numeric_part = num_gen3(IBAN_length - 5)\n\t\tvar nb = \"0\" + CR_numeric_part;\n\t\tvar CR_IBAN = calcChecksum(ISO, nb);\n\t\treturn CR_IBAN;\n\n  case \"Portugal\":\n\t\tvar PT_numeric_part = _.sample(Portugal_sort) + num_gen3(IBAN_length - 14);\n\t\tvar PT_randomPart =  PT_numeric_part + mod97_10(PT_numeric_part);\n\t\tvar PT_IBAN = calcChecksum(ISO, PT_randomPart);\n\t\treturn PT_IBAN;\n\n  default:\n    ISO = iso_abbreviations[country_input];\n\tIBAN_length = country_length[country_input];\n\tmiddle_characters = character_countries[country_input];\n\tvar numeric_suffix = Number(IBAN_length - 4 - middle_characters);\n\t\n\tvar BIC = char_gen(middle_characters);\n\trandomPart = BIC + num_gen3(numeric_suffix) + \"\";\n\t\n\treturn calcChecksum(ISO, randomPart);\n  }\n}\n\n","function getRandomElement(arr) {\n    const i = Math.floor(Math.random() * arr.length);\n    return arr[i];\n}\n\nfunction doubleElement(arr) {\n    arr.push(getRandomElement(arr));\n}\n\nfunction trippleElement(arr) {\n    const e = getRandomElement(arr);\n    arr.push(e, e);\n}\n\nfunction shuffle(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n}\n\nfunction remove(arr, n) {\n    for (let i = 0; i < n; i++) {\n        arr.pop();\n    }\n}\n\nfunction getFirstTenDigits() {\n    const digits = [];\n    for (let i = 0; i < 10; i++) {\n        digits.push(i);\n    }\n\n    shuffle(digits);\n\n    if (Math.random() > 0.5) {\n        remove(digits, 1);\n        doubleElement(digits);\n    } else {\n        remove(digits, 2);\n        trippleElement(digits);\n    }\n\n    shuffle(digits);\n\n    // the first digit must not be 0\n    if (digits[0] === 0) {\n        digits.push(digits.shift())\n    }\n\n\n    return digits;\n}\n\nfunction calcCheckDigit(digits) {\n    let prod = 0;\n    for (let i = 0; i < digits.length; i++) {\n        let sum = (digits[i] + prod) % 10;\n        if (sum === 0) {\n            sum = 10;\n        }\n        prod = (sum * 2) % 11;\n    }\n\n    let check = 11 - prod;\n    if (check === 10) {\n        check = 0;\n    }\n\n    return check;\n}\n\nexport function createSteuerIdDigits() {\n    const digits = getFirstTenDigits();\n    digits.push(calcCheckDigit(digits));\n    var s = getIndexoffThreeDigitsInRow(digits);\n    return checkThreeDigistAreInRow(s, digits).toString().replaceAll(',','');;\n}\nfunction checkThreeDigistAreInRow(s, digits) {\n    var threeInRow = false;\n    if (s !== -1 && digits[s] === digits[s - 1] && digits[s - 1] === digits[s - 2]) {\n        threeInRow = true;\n    } else {\n        threeInRow = false;\n    }\n    while (threeInRow === true) {\n        threeInRow = false;\n        digits = getFirstTenDigits();\n        digits.push(calcCheckDigit(digits));\n        s = getIndexoffThreeDigitsInRow(digits);\n        if (s !== -1 && digits[s] === digits[s + 1] && digits[s + 1] === digits[s + 2]) {\n            threeInRow = true;\n        } else {\n            threeInRow = false;\n        }\n    } \n    return digits;\n}\n\nfunction getIndexoffThreeDigitsInRow(digits){\n    var faceCount = [0,0,0,0,0,0,0,0,0,0];\n    digits.forEach(x => {\n        faceCount[x]++;        \n    });\n   \n    var element = -1\n    faceCount.forEach(function(item, index){\n        if(item ===  3){\n            element = index;            \n        }       \n    });\n    var indexOfThrees = -1;\n    digits.forEach(function(item, index){\n        if(item === element){\n            indexOfThrees = index;            \n        }        \n    });   \n    return indexOfThrees;\n}\n","import React from 'react';\nimport './App.css';\nimport ReactModal from 'react-modal';\nimport { Form } from 'react-bootstrap'; \nimport { CSVLink } from \"react-csv\";\n\nimport { buildIbans } from './mapp4';\nimport { createSteuerIdDigits } from './strId';\n\n\nReactModal.setAppElement('#main');\n\nconst gm = require('avris-generator');\n\nvar countriesForUmsatzID = [\n  { value: 'HR', label: 'Kroatien' },\n  { value: 'DK', label: 'Dänemark' },\n  { value: 'FR', label: 'Frankreich' },\n  { value: 'DE', label: 'Deutschland' },\n  { value: 'IE', label: 'Ireland' },\n  { value: 'IT', label: 'Italien' },\n  { value: 'LU', label: 'Luxemburg' },\n  { value: 'NL', label: 'Niederland' },\n];\n\nvar countriesForIBAN = [\n  { value: 'Croatia', label: 'Kroatien' },\n  { value: 'Denmark', label: 'Dänemark' },\n  { value: 'Egypt', label: 'Ägypten' },\n  { value: 'France', label: 'Frankreich' },\n  { value: 'Germany', label: 'Deutschland' },\n  { value: 'Greece', label: 'Griechenland' },\n  { value: 'Iran', label: 'Iran' },\n  { value: 'Ireland', label: 'Ireland' },\n  { value: 'Italy', label: 'Italien' },\n  { value: 'Luxembourg', label: 'Luxemburg' },\n  { value: 'Netherlands', label: 'Niederland' },\n  { value: 'Switzerland', label: 'Schweiz' },\n  { value: 'Turkey', label: 'Türkei' },\n  { value: 'UK', label: 'Großbritanien' },\n];\n\nconst csvHeaders = [\n  { label: \"Environment\", key: \"environment\" },  \n  { label: \"Program\", key: \"program\" },\n  { label: \"TaxNumber\", key: \"taxnumber\" },\n  { label: \"TaxID\", key: \"taxid\" },\n  { label: \"IBAN\", key: \"iban\" },\n  { label: \"RequestNumber\", key: \"requestnumber\" },\n  { label: \"ProcessNumber\", key: \"processnumber\" },\n  { label: \"Decision\", key: \"decision\" },\n];\n \nconst csvData = [];\n\nfunction buildUSTID(country) {\n  const countryEntry = countriesForUmsatzID.find(obj => obj.label === country);\n  const num = countryEntry.value + Math.floor(Math.random() * (999999999 - 100000000));\n  return num;\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: 'Germany',\n      iban: buildIbans('Germany'),\n      taxIDNumber: createSteuerIdDigits(),\n      bundesland: 'Alle Bundesländer',\n      taxNumber: gm.generate('DE', 'stnr'),\n      ustIDCountry: 'Deutschland',\n      ustID: buildUSTID('Deutschland'),\n\n      showModal: false,\n      environment:'STAGE',\n      programm:'NSH',\n      request: 'NSH1P-',\n      process:'',\n      requestTaxNum:'',\n      requestTaxID: '',\n      requestIban: '', \n      decision: 'in Assessment'\n    };\n\n    this.bundeslandHandlerTaxNum = this.bundeslandHandlerTaxNum.bind(this);\n    this.handleSubmitTaxNum = this.handleSubmitTaxNum.bind(this);\n    this.handleSubmitTaxID = this.handleSubmitTaxID.bind(this);\n    this.countryHandler = this.countryHandler.bind(this);\n    this.handleSubmitIBAN = this.handleSubmitIBAN.bind(this);\n    this.generateAllValues = this.generateAllValues.bind(this);\n    this.handleSubmitUstID = this.handleSubmitUstID.bind(this);\n    this.handleOnChangeUstID = this.handleOnChangeUstID.bind(this);\n    // CSV and Modal handler \n    this.handleCSVData = this.handleCSVData.bind(this);\n    this.handleOpenModal = this.handleOpenModal.bind(this);\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n    this.handleSaveData = this.handleSaveData.bind(this);\n    \n  }\n\n \n  \n  bundeslandHandlerTaxNum(e) {\n    const bl = e.target.value === \"all\" ? 'Alle Bundesländer' : e.target.value\n    const stnr = bl === 'Alle Bundesländer' ? gm.generate('DE', 'stnr') : gm.generate('DE', 'stnr', { state: bl });\n    this.setState({ bundesland: bl , taxNumber: stnr});\n    e.preventDefault();\n  };\n  handleSubmitTaxNum(e) {\n    var bl = this.state.bundesland;\n    const stnr = bl === 'Alle Bundesländer' ? gm.generate('DE', 'stnr') : gm.generate('DE', 'stnr', { state: bl });\n    this.setState({ taxNumber: stnr });\n    e.preventDefault();\n  }\n  handleSubmitTaxID(e) {\n    this.setState({ taxIDNumber: createSteuerIdDigits() });\n    e.preventDefault();\n  }\n\n  countryHandler(e) {\n    const target = e.target;\n    const value = target.value;\n    this.setState({\n      country: value,\n      iban: buildIbans(value)\n    });\n    e.preventDefault();\n  };\n\n  handleSubmitIBAN(e) {\n    this.setState({\n      iban: buildIbans(this.state.country)\n    });\n    e.preventDefault();\n  }\n\n  generateAllValues(e) {\n    var bl = this.state.bundesland;\n    const stnr = bl === 'Alle Bundesländer' ? gm.generate('DE', 'stnr') : gm.generate('DE', 'stnr', { state: bl });\n    const num = buildUSTID(this.state.ustIDCountry);\n    \n    this.setState({\n      taxIDNumber: createSteuerIdDigits(),\n      taxNumber: stnr,\n      iban: buildIbans(this.state.country),\n      ustID: num\n    });\n\n  }\n\n  handleOnChangeUstID(e) {\n    const num = buildUSTID(e.target.value);\n    \n    this.setState({\n      ustID: num,\n      ustIDCountry: e.target.value\n    });\n    e.preventDefault();\n  }\n  handleSubmitUstID(e) {\n\n    const num = buildUSTID(this.state.ustIDCountry);\n    this.setState({\n      ustID: num,\n    });\n\n    e.preventDefault();\n  }\n\n// CSV and Modal handler BEGIN\n  handleCSVData(e){\n    console.log(\"Click\");\n  }\n  handleOpenModal () {\n    this.setState({ showModal: true });\n  }\n  \n  handleCloseModal () {\n    this.setState({ showModal: false });\n  }\n  handleSaveData(){\n   \n    csvData.push({  decision: this.state.decision,\n                    environment: this.state.environment, \n                    program: this.state.programm, \n                    taxnumber: this.state.requestTaxNum === '' ? this.state.taxNumber : this.state.requestTaxNum,\n                    taxid: this.state.requestTaxID === '' ? this.state.taxIDNumber:this.state.requestTaxID, \n                    iban: this.state.requestIban === '' ? this.state.iban :this.state.requestIban, \n                    requestnumber: this.state.request, \n                    processnumber: this.state.process,  });\n    this.handleCloseModal();\n  }\n// CSV and Modal handler END\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header >\n          <h1>Generator for VAT ID, Tax ID, Tax Number and IBAN </h1>\n        </header>\n\n        <div>\n\n          <form>\n            <label className=\"label\">VAT ID: &#160;</label>\n            <input type=\"text\" className=\"todo-input\" disabled value={this.state.ustID} />\n            <p>&#160;</p>\n            <div className=\"select\">\n\n              <select value={this.state.ustIDCountry} className=\"filter-todo\" name=\"ustid\" onChange={this.handleOnChangeUstID}>\n                {countriesForUmsatzID.map((option) => (\n                  <option key={option.value} value={option.label}>{option.label}</option>\n                ))}\n              </select>\n\n            </div>\n            <button onClick={this.handleSubmitUstID} className=\"todo-button\">\n              <i className=\"fas fa-random\"></i>\n            </button>\n          </form>\n        </div>\n\n        <div>\n          <div className=\"mybutton\">\n\n          </div>\n          <form>\n            <label className=\"label\">Tax ID: &#160;</label>\n            <input type=\"text\" className=\"inputResize\" disabled value={this.state.taxIDNumber} />\n            <p>&#160;</p>\n            <button onClick={this.handleSubmitTaxID} className=\"todo-button\">\n              <i className=\"fas fa-random\"></i>\n            </button>\n          </form>\n        </div>\n\n        <div>\n\n          <form>\n            <label className=\"label\">Tax Nr: &#160;</label>\n            <input type=\"text\" className=\"todo-input\" disabled value={this.state.taxNumber} />\n            <div className=\"select\">\n              <select name=\"state\" onChange={this.bundeslandHandlerTaxNum} className=\"filter-todo\">\n                <option key=\"0\" value=\"all\">Alle Bundesländer</option>\n                <option key=\"1\" value=\"BW\">Baden-Württemberg</option>\n                <option key=\"2\" value=\"BY\">Bayern</option>\n                <option key=\"3\" value=\"BE\">Berlin</option>\n                <option key=\"4\" value=\"BB\">Brandenburg</option>\n                <option key=\"5\" value=\"HB\">Bremen</option>\n                <option key=\"6\" value=\"HH\">Hamburg</option>\n                <option key=\"7\" value=\"HE\">Hessen</option>\n                <option key=\"8\" value=\"MV\">Mecklenburg-Vorponnern</option>\n                <option key=\"9\" value=\"NI\">Niedersachsen</option>\n                <option key=\"10\" value=\"NW\">Nordrhein-Westfalen</option>\n                <option key=\"11\" value=\"RP\">Rheinland-Pfalz</option>\n                <option key=\"12\" value=\"SL\">Saarland</option>\n                <option key=\"13\" value=\"SN\">Sachsen</option>\n                <option key=\"14\" value=\"ST\">Sachsen-Anhalt</option>\n                <option key=\"15\" value=\"SH\">Schleswig-Holstein</option>\n                <option key=\"16\" value=\"TH\">Thüringen</option>\n              </select>\n            </div>\n\n            <button onClick={this.handleSubmitTaxNum} className=\"todo-button\">\n              <i className=\"fas fa-random\"></i>\n            </button>\n          </form>\n\n        </div>\n\n        <div>\n          <form>\n            <label className=\"label\">Ibans : &#160;</label>\n            <input type=\"text\" className=\"todo-input\" disabled value={this.state.iban} />\n            <div className=\"select\">\n\n              <select value={this.state.country} className=\"filter-todo\" name=\"iban\" onChange={this.countryHandler}>\n                {countriesForIBAN.map((option) => (\n                  <option key={option.value} value={option.value}>{option.label}</option>\n                ))}\n              </select>\n\n            </div>\n            <button onClick={this.handleSubmitIBAN} className=\"todo-button\">\n              <i className=\"fas fa-random\"></i>\n            </button>\n          </form>\n        </div>\n        <center>\n          <div>\n            <button  id=\"generatorAll\" onClick={this.generateAllValues} className=\"buttontest\">\n            <i className=\"fas fa-random\"></i> Generate \n            </button>\n          </div>\n          \n        </center>\n        <div>.</div>\n        <center>\n          <div>\n            <button className=\"buttontest Spacing\" onClick={this.handleOpenModal}> <i class=\"fas fa-plus-square\"></i> Add to CSV</button>\n            <CSVLink  className=\"buttontest Decoration Spacing Spacing\" data={csvData} headers={csvHeaders} filename={\"UBHData.csv\"}><i class=\"fas fa-cloud-download-alt\"></i> Download CSV</CSVLink>\n            \n            <ReactModal isOpen={this.state.showModal} \n                        contentLabel=\"onRequestClose Example\"\n                        onRequestClose={this.handleCloseModal}\n                        className=\"Modal\"\n                        overlayClassName=\"Overlay\">\n              <p className=\"ModalText\" >Save the information about NSH1P for testing NSHXP cases! </p>\n              <br></br>\n              <Form>\n                <Form.Group size=\"lg\">\n                <Form.Label className=\"ModalLabel\" >Environment</Form.Label>\n                  <Form.Label className=\"ModalLabel\" >Program</Form.Label>\n                  <Form.Label className=\"ModalLabel\" >RequestID</Form.Label>\n                  <Form.Label className=\"ModalLabel\" >ProcessID</Form.Label>\n                  <Form.Label className=\"ModalLabel\" >TaxID</Form.Label>\n                  <Form.Label className=\"ModalLabel\" >TaxNumber</Form.Label>\n                  <Form.Label className=\"ModalLabel\" >Iban</Form.Label>\n                  <Form.Label className=\"ModalLabel\" >Decision</Form.Label>\n                </Form.Group>\n                <Form.Group size=\"lg\">\n                <Form.Control className = \"ModalInput\" type=\"text\" defaultValue=\"STAGE\" onInput={e => this.setState({environment: e.target.value})} />\n                  <Form.Control className = \"ModalInput\" type=\"text\" defaultValue=\"NSH\" onInput={e => this.setState({programm: e.target.value})} />\n                  <Form.Control className = \"ModalInput\" type=\"text\" defaultValue=\"NSH1P-\" onInput={e => this.setState({request: e.target.value})}/>\n                  <Form.Control className = \"ModalInput\" type=\"text\" defaultValue=\"\" onInput={e => this.setState({process: e.target.value})}/>\n                  <Form.Control className = \"ModalInput\" type=\"text\" defaultValue={this.state.taxNumber} onInput={e => this.setState({requestTaxNum: e.target.value})}/>\n                  <Form.Control className = \"ModalInput\" type=\"text\" defaultValue={this.state.taxIDNumber} onInput={e => this.setState({requestTaxID: e.target.value})}/>\n                  <Form.Control className = \"ModalInput\" type=\"text\" defaultValue={this.state.iban} onInput={e => this.setState({requestIban: e.target.value})} />\n                  <Form.Control className = \"ModalInput\" type=\"text\" defaultValue={this.state.decision} onInput={e => this.setState({decision: e.target.value})} />\n                </Form.Group>                \n              </Form>\n\n              <br></br>\n              <center>\n                <button className=\"ModalCloseButton\" onClick={this.handleCloseModal}>Close</button>\n              \n                <button className=\"Spacing ButtonModal\" onClick={this.handleSaveData}>Save Changes</button>\n              </center>\n              \n            </ReactModal>\n          </div>\n          \n        </center>\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}